{"ast":null,"code":"var _jsxFileName = \"/Users/irenepaul/Documents/GitHub/Just-Because/Just Because/src/BackgroundSlideshow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 3; // 3x3 grid\nconst ANIMATION_DURATION = 0.8; // Seconds for one slide animation\nconst MOVE_INTERVAL = 1.5; // Time between moves in seconds\n\nexport default function BackgroundSlideshow({\n  images\n}) {\n  _s();\n  const controls = useAnimation();\n  const [cardData, setCardData] = useState([]);\n  const imageIndexRef = useRef(0);\n  const nextCardId = useRef(0);\n  const [cardDimension, setCardDimension] = useState(200);\n  const calculateCardDimension = useCallback(() => {\n    const minDimension = Math.min(window.innerWidth, window.innerHeight);\n    // Adjust CARD_DIMENSION to fit GRID_SIZE cards with some padding\n    setCardDimension(Math.floor(minDimension * 0.8 / GRID_SIZE));\n  }, []);\n  useEffect(() => {\n    calculateCardDimension();\n    window.addEventListener('resize', calculateCardDimension);\n    return () => window.removeEventListener('resize', calculateCardDimension);\n  }, [calculateCardDimension]);\n  useEffect(() => {\n    const initialCards = Array.from({\n      length: GRID_SIZE * GRID_SIZE\n    }, (_, i) => ({\n      id: nextCardId.current++,\n      image: images[imageIndexRef.current++ % images.length],\n      position: {\n        row: Math.floor(i / GRID_SIZE),\n        col: i % GRID_SIZE\n      },\n      key: `card-${nextCardId.current - 1}`\n    }));\n    setCardData(initialCards);\n    const animateGrid = async () => {\n      while (true) {\n        await new Promise(resolve => setTimeout(resolve, MOVE_INTERVAL * 1000));\n        const isRow = Math.random() > 0.5;\n        const indexToAnimate = Math.floor(Math.random() * GRID_SIZE);\n        const direction = Math.random() > 0.5 ? 1 : -1; // 1 for forward (right/down), -1 for backward (left/up)\n\n        setCardData(prevCards => {\n          const newCards = [...prevCards];\n          const affectedCards = newCards.filter(card => isRow ? card.position.row === indexToAnimate : card.position.col === indexToAnimate);\n\n          // Sort cards to ensure consistent movement (e.g., for a b c -> c a b)\n          affectedCards.sort((a, b) => isRow ? a.position.col - b.position.col : a.position.row - b.position.row);\n          const movedCard = direction === 1 ? affectedCards[affectedCards.length - 1] : affectedCards[0];\n          affectedCards.forEach(card => {\n            if (card.id === movedCard.id) {\n              // This card will move to the other end of the line\n              if (isRow) {\n                card.position.col = direction === 1 ? 0 : GRID_SIZE - 1;\n              } else {\n                card.position.row = direction === 1 ? 0 : GRID_SIZE - 1;\n              }\n            } else {\n              // Other cards shift their positions\n              if (isRow) {\n                card.position.col = (card.position.col + direction + GRID_SIZE) % GRID_SIZE;\n              } else {\n                card.position.row = (card.position.row + direction + GRID_SIZE) % GRID_SIZE;\n              }\n            }\n            // Update image for the card that moved to the 'new' position\n            if (card.id === movedCard.id) {\n              card.image = images[imageIndexRef.current++ % images.length];\n            }\n          });\n          return newCards;\n        });\n      }\n    };\n    animateGrid();\n  }, [images, controls]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute inset-0 z-0 overflow-hidden bg-gray-900 flex items-center justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative grid\",\n      style: {\n        gridTemplateColumns: `repeat(${GRID_SIZE}, ${cardDimension}px)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, ${cardDimension}px)`,\n        width: GRID_SIZE * cardDimension,\n        height: GRID_SIZE * cardDimension\n      },\n      children: cardData.map(card => /*#__PURE__*/_jsxDEV(motion.div, {\n        layout: true,\n        transition: {\n          duration: ANIMATION_DURATION,\n          ease: 'easeInOut'\n        },\n        className: \"relative bg-white rounded-lg shadow-lg flex items-center justify-center p-2 overflow-hidden\",\n        style: {\n          gridColumn: card.position.col + 1,\n          gridRow: card.position.row + 1\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: \"Slideshow Card\",\n          className: \"w-full h-full object-cover rounded-md\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, card.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black opacity-50 z-10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(BackgroundSlideshow, \"cGUPwnoIq57GU+4fq2f5C62JWk4=\", false, function () {\n  return [useAnimation];\n});\n_c = BackgroundSlideshow;\nvar _c;\n$RefreshReg$(_c, \"BackgroundSlideshow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","motion","useAnimation","jsxDEV","_jsxDEV","GRID_SIZE","ANIMATION_DURATION","MOVE_INTERVAL","BackgroundSlideshow","images","_s","controls","cardData","setCardData","imageIndexRef","nextCardId","cardDimension","setCardDimension","calculateCardDimension","minDimension","Math","min","window","innerWidth","innerHeight","floor","addEventListener","removeEventListener","initialCards","Array","from","length","_","i","id","current","image","position","row","col","key","animateGrid","Promise","resolve","setTimeout","isRow","random","indexToAnimate","direction","prevCards","newCards","affectedCards","filter","card","sort","a","b","movedCard","forEach","className","children","style","gridTemplateColumns","gridTemplateRows","width","height","map","div","layout","transition","duration","ease","gridColumn","gridRow","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irenepaul/Documents/GitHub/Just-Because/Just Because/src/BackgroundSlideshow.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\n\ninterface BackgroundSlideshowProps {\n  images: string[];\n}\n\nconst GRID_SIZE = 3; // 3x3 grid\nconst ANIMATION_DURATION = 0.8; // Seconds for one slide animation\nconst MOVE_INTERVAL = 1.5; // Time between moves in seconds\n\ninterface Card {\n  id: number;\n  image: string;\n  position: { row: number; col: number };\n  key: string; // Unique key for Framer Motion's AnimatePresence\n}\n\nexport default function BackgroundSlideshow({ images }: BackgroundSlideshowProps) {\n  const controls = useAnimation();\n  const [cardData, setCardData] = useState<Card[]>([]);\n  const imageIndexRef = useRef(0);\n  const nextCardId = useRef(0);\n  const [cardDimension, setCardDimension] = useState(200);\n\n  const calculateCardDimension = useCallback(() => {\n    const minDimension = Math.min(window.innerWidth, window.innerHeight);\n    // Adjust CARD_DIMENSION to fit GRID_SIZE cards with some padding\n    setCardDimension(Math.floor((minDimension * 0.8) / GRID_SIZE));\n  }, []);\n\n  useEffect(() => {\n    calculateCardDimension();\n    window.addEventListener('resize', calculateCardDimension);\n    return () => window.removeEventListener('resize', calculateCardDimension);\n  }, [calculateCardDimension]);\n\n  useEffect(() => {\n    const initialCards: Card[] = Array.from({ length: GRID_SIZE * GRID_SIZE }, (_, i) => ({\n      id: nextCardId.current++,\n      image: images[imageIndexRef.current++ % images.length],\n      position: { row: Math.floor(i / GRID_SIZE), col: i % GRID_SIZE },\n      key: `card-${nextCardId.current - 1}`,\n    }));\n    setCardData(initialCards);\n\n    const animateGrid = async () => {\n      while (true) {\n        await new Promise(resolve => setTimeout(resolve, MOVE_INTERVAL * 1000));\n\n        const isRow = Math.random() > 0.5;\n        const indexToAnimate = Math.floor(Math.random() * GRID_SIZE);\n        const direction = Math.random() > 0.5 ? 1 : -1; // 1 for forward (right/down), -1 for backward (left/up)\n\n        setCardData(prevCards => {\n          const newCards = [...prevCards];\n          const affectedCards = newCards.filter(card => \n            isRow ? card.position.row === indexToAnimate : card.position.col === indexToAnimate\n          );\n\n          // Sort cards to ensure consistent movement (e.g., for a b c -> c a b)\n          affectedCards.sort((a, b) => \n            isRow ? a.position.col - b.position.col : a.position.row - b.position.row\n          );\n\n          const movedCard = direction === 1 ? affectedCards[affectedCards.length - 1] : affectedCards[0];\n\n          affectedCards.forEach(card => {\n            if (card.id === movedCard.id) {\n              // This card will move to the other end of the line\n              if (isRow) {\n                card.position.col = direction === 1 ? 0 : GRID_SIZE - 1;\n              } else {\n                card.position.row = direction === 1 ? 0 : GRID_SIZE - 1;\n              }\n            } else {\n              // Other cards shift their positions\n              if (isRow) {\n                card.position.col = (card.position.col + direction + GRID_SIZE) % GRID_SIZE;\n              } else {\n                card.position.row = (card.position.row + direction + GRID_SIZE) % GRID_SIZE;\n              }\n            }\n            // Update image for the card that moved to the 'new' position\n            if (card.id === movedCard.id) {\n                card.image = images[imageIndexRef.current++ % images.length];\n            }\n          });\n\n          return newCards;\n        });\n      }\n    };\n\n    animateGrid();\n  }, [images, controls]);\n\n  return (\n    <div className=\"absolute inset-0 z-0 overflow-hidden bg-gray-900 flex items-center justify-center\">\n      <div\n        className=\"relative grid\"\n        style={{\n          gridTemplateColumns: `repeat(${GRID_SIZE}, ${cardDimension}px)`,\n          gridTemplateRows: `repeat(${GRID_SIZE}, ${cardDimension}px)`,\n          width: GRID_SIZE * cardDimension,\n          height: GRID_SIZE * cardDimension,\n        }}\n      >\n        {cardData.map((card) => (\n          <motion.div\n            key={card.key}\n            layout\n            transition={{ duration: ANIMATION_DURATION, ease: 'easeInOut' }}\n            className=\"relative bg-white rounded-lg shadow-lg flex items-center justify-center p-2 overflow-hidden\"\n            style={{\n              gridColumn: card.position.col + 1,\n              gridRow: card.position.row + 1,\n            }}\n          >\n            <img src={card.image} alt=\"Slideshow Card\" className=\"w-full h-full object-cover rounded-md\" />\n          </motion.div>\n        ))}\n      </div>\n      <div className=\"absolute inset-0 bg-black opacity-50 z-10\"></div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}