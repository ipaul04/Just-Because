{"ast":null,"code":"var _jsxFileName = \"/Users/irenepaul/Documents/GitHub/Just-Because/Just Because/src/BackgroundSlideshow.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRID_SIZE = 3; // 3x3 grid\nconst CARD_DIMENSION = 200; // Size of each card in pixels\nconst ANIMATION_DURATION = 0.8; // Seconds for one slide animation\nconst MOVE_INTERVAL = 1.5; // Time between moves in seconds\n\nexport default function BackgroundSlideshow({\n  images\n}) {\n  _s();\n  const controls = useAnimation();\n  const [cardData, setCardData] = useState([]);\n  const imageIndexRef = useRef(0);\n  const nextCardId = useRef(0);\n  useEffect(() => {\n    const initialCards = Array.from({\n      length: GRID_SIZE * GRID_SIZE\n    }, (_, i) => ({\n      id: nextCardId.current++,\n      image: images[imageIndexRef.current++ % images.length],\n      position: {\n        row: Math.floor(i / GRID_SIZE),\n        col: i % GRID_SIZE\n      },\n      key: `card-${nextCardId.current - 1}`\n    }));\n    setCardData(initialCards);\n    const animateGrid = async () => {\n      while (true) {\n        await new Promise(resolve => setTimeout(resolve, MOVE_INTERVAL * 1000));\n        const isRow = Math.random() > 0.5;\n        const indexToAnimate = Math.floor(Math.random() * GRID_SIZE);\n        const direction = Math.random() > 0.5 ? 1 : -1; // 1 for forward (right/down), -1 for backward (left/up)\n\n        setCardData(prevCards => {\n          let newCards = [...prevCards];\n          const cardsInAffectedLine = newCards.filter(card => isRow ? card.position.row === indexToAnimate : card.position.col === indexToAnimate);\n\n          // Mark cards that are moving out\n          const exitingCard = cardsInAffectedLine.find(card => isRow && direction === 1 && card.position.col === GRID_SIZE - 1 || isRow && direction === -1 && card.position.col === 0 || !isRow && direction === 1 && card.position.row === GRID_SIZE - 1 || !isRow && direction === -1 && card.position.row === 0);\n\n          // Update positions of remaining cards in the line\n          cardsInAffectedLine.forEach(card => {\n            if (card !== exitingCard) {\n              if (isRow) {\n                card.position.col = (card.position.col + direction + GRID_SIZE) % GRID_SIZE;\n              } else {\n                card.position.row = (card.position.row + direction + GRID_SIZE) % GRID_SIZE;\n              }\n            }\n          });\n\n          // Remove the exiting card\n          if (exitingCard) {\n            newCards = newCards.filter(card => card.id !== exitingCard.id);\n          }\n\n          // Add a new entering card\n          const enteringCardPosition = {\n            row: isRow ? indexToAnimate : direction === 1 ? 0 : GRID_SIZE - 1,\n            col: isRow ? direction === 1 ? 0 : GRID_SIZE - 1 : indexToAnimate\n          };\n          const newCard = {\n            id: nextCardId.current++,\n            image: images[imageIndexRef.current++ % images.length],\n            position: enteringCardPosition,\n            key: `card-${nextCardId.current - 1}`\n          };\n          newCards.push(newCard);\n          return newCards;\n        });\n      }\n    };\n    animateGrid();\n  }, [images, controls]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"absolute inset-0 z-0 overflow-hidden bg-gray-900 flex items-center justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative grid\",\n      style: {\n        gridTemplateColumns: `repeat(${GRID_SIZE}, ${CARD_DIMENSION}px)`,\n        gridTemplateRows: `repeat(${GRID_SIZE}, ${CARD_DIMENSION}px)`,\n        width: GRID_SIZE * CARD_DIMENSION,\n        height: GRID_SIZE * CARD_DIMENSION\n      },\n      children: cardData.map(card => /*#__PURE__*/_jsxDEV(motion.div, {\n        layout: true,\n        transition: {\n          duration: ANIMATION_DURATION,\n          ease: 'easeInOut'\n        },\n        className: \"relative bg-white rounded-lg shadow-lg flex items-center justify-center p-2 overflow-hidden\",\n        style: {\n          gridColumn: card.position.col + 1,\n          gridRow: card.position.row + 1\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: card.image,\n          alt: \"Slideshow Card\",\n          className: \"w-full h-full object-cover rounded-md\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, card.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black opacity-50 z-10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(BackgroundSlideshow, \"PVfiEQw9rd5zI52swf8bkY2UiRg=\", false, function () {\n  return [useAnimation];\n});\n_c = BackgroundSlideshow;\nvar _c;\n$RefreshReg$(_c, \"BackgroundSlideshow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","motion","useAnimation","jsxDEV","_jsxDEV","GRID_SIZE","CARD_DIMENSION","ANIMATION_DURATION","MOVE_INTERVAL","BackgroundSlideshow","images","_s","controls","cardData","setCardData","imageIndexRef","nextCardId","initialCards","Array","from","length","_","i","id","current","image","position","row","Math","floor","col","key","animateGrid","Promise","resolve","setTimeout","isRow","random","indexToAnimate","direction","prevCards","newCards","cardsInAffectedLine","filter","card","exitingCard","find","forEach","enteringCardPosition","newCard","push","className","children","style","gridTemplateColumns","gridTemplateRows","width","height","map","div","layout","transition","duration","ease","gridColumn","gridRow","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/irenepaul/Documents/GitHub/Just-Because/Just Because/src/BackgroundSlideshow.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\n\ninterface BackgroundSlideshowProps {\n  images: string[];\n}\n\nconst GRID_SIZE = 3; // 3x3 grid\nconst CARD_DIMENSION = 200; // Size of each card in pixels\nconst ANIMATION_DURATION = 0.8; // Seconds for one slide animation\nconst MOVE_INTERVAL = 1.5; // Time between moves in seconds\n\ninterface Card {\n  id: number;\n  image: string;\n  position: { row: number; col: number };\n  key: string; // Unique key for Framer Motion's AnimatePresence\n}\n\nexport default function BackgroundSlideshow({ images }: BackgroundSlideshowProps) {\n  const controls = useAnimation();\n  const [cardData, setCardData] = useState<Card[]>([]);\n  const imageIndexRef = useRef(0);\n  const nextCardId = useRef(0);\n\n  useEffect(() => {\n    const initialCards: Card[] = Array.from({ length: GRID_SIZE * GRID_SIZE }, (_, i) => ({\n      id: nextCardId.current++,\n      image: images[imageIndexRef.current++ % images.length],\n      position: { row: Math.floor(i / GRID_SIZE), col: i % GRID_SIZE },\n      key: `card-${nextCardId.current - 1}`,\n    }));\n    setCardData(initialCards);\n\n    const animateGrid = async () => {\n      while (true) {\n        await new Promise(resolve => setTimeout(resolve, MOVE_INTERVAL * 1000));\n\n        const isRow = Math.random() > 0.5;\n        const indexToAnimate = Math.floor(Math.random() * GRID_SIZE);\n        const direction = Math.random() > 0.5 ? 1 : -1; // 1 for forward (right/down), -1 for backward (left/up)\n\n        setCardData(prevCards => {\n          let newCards = [...prevCards];\n          const cardsInAffectedLine = newCards.filter(card => \n            isRow ? card.position.row === indexToAnimate : card.position.col === indexToAnimate\n          );\n\n          // Mark cards that are moving out\n          const exitingCard = cardsInAffectedLine.find(card => \n            (isRow && direction === 1 && card.position.col === GRID_SIZE - 1) ||\n            (isRow && direction === -1 && card.position.col === 0) ||\n            (!isRow && direction === 1 && card.position.row === GRID_SIZE - 1) ||\n            (!isRow && direction === -1 && card.position.row === 0)\n          );\n\n          // Update positions of remaining cards in the line\n          cardsInAffectedLine.forEach(card => {\n            if (card !== exitingCard) {\n              if (isRow) {\n                card.position.col = (card.position.col + direction + GRID_SIZE) % GRID_SIZE;\n              } else {\n                card.position.row = (card.position.row + direction + GRID_SIZE) % GRID_SIZE;\n              }\n            }\n          });\n\n          // Remove the exiting card\n          if (exitingCard) {\n            newCards = newCards.filter(card => card.id !== exitingCard.id);\n          }\n\n          // Add a new entering card\n          const enteringCardPosition = {\n            row: isRow ? indexToAnimate : (direction === 1 ? 0 : GRID_SIZE - 1),\n            col: isRow ? (direction === 1 ? 0 : GRID_SIZE - 1) : indexToAnimate,\n          };\n\n          const newCard: Card = {\n            id: nextCardId.current++,\n            image: images[imageIndexRef.current++ % images.length],\n            position: enteringCardPosition,\n            key: `card-${nextCardId.current - 1}`,\n          };\n          newCards.push(newCard);\n          \n          return newCards;\n        });\n      }\n    };\n\n    animateGrid();\n  }, [images, controls]);\n\n  return (\n    <div className=\"absolute inset-0 z-0 overflow-hidden bg-gray-900 flex items-center justify-center\">\n      <div\n        className=\"relative grid\"\n        style={{\n          gridTemplateColumns: `repeat(${GRID_SIZE}, ${CARD_DIMENSION}px)`,\n          gridTemplateRows: `repeat(${GRID_SIZE}, ${CARD_DIMENSION}px)`,\n          width: GRID_SIZE * CARD_DIMENSION,\n          height: GRID_SIZE * CARD_DIMENSION,\n        }}\n      >\n        {cardData.map((card) => (\n          <motion.div\n            key={card.key}\n            layout\n            transition={{ duration: ANIMATION_DURATION, ease: 'easeInOut' }}\n            className=\"relative bg-white rounded-lg shadow-lg flex items-center justify-center p-2 overflow-hidden\"\n            style={{\n              gridColumn: card.position.col + 1,\n              gridRow: card.position.row + 1,\n            }}\n          >\n            <img src={card.image} alt=\"Slideshow Card\" className=\"w-full h-full object-cover rounded-md\" />\n          </motion.div>\n        ))}\n      </div>\n      <div className=\"absolute inset-0 bg-black opacity-50 z-10\"></div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}